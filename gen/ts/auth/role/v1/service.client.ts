// @generated by protobuf-ts 2.9.0
// @generated from protobuf file "auth/role/v1/service.proto" (package "auth.role.v1", syntax proto3)
// tslint:disable
import type { RpcTransport } from "@protobuf-ts/runtime-rpc";
import type { ServiceInfo } from "@protobuf-ts/runtime-rpc";
import { RoleService } from "./service";
import type { RoleServiceUpdateResponse } from "./service";
import type { RoleServiceUpdateRequest } from "./service";
import type { RoleServiceCreateResponse } from "./service";
import type { RoleServiceCreateRequest } from "./service";
import type { RoleServiceByIDResponse } from "./service";
import type { RoleServiceByIDRequest } from "./service";
import { stackIntercept } from "@protobuf-ts/runtime-rpc";
import type { RoleServiceAllResponse } from "./service";
import type { RoleServiceAllRequest } from "./service";
import type { UnaryCall } from "@protobuf-ts/runtime-rpc";
import type { RpcOptions } from "@protobuf-ts/runtime-rpc";
/**
 * @generated from protobuf service auth.role.v1.RoleService
 */
export interface IRoleServiceClient {
    /**
     * @generated from protobuf rpc: All(auth.role.v1.RoleServiceAllRequest) returns (auth.role.v1.RoleServiceAllResponse);
     */
    all(input: RoleServiceAllRequest, options?: RpcOptions): UnaryCall<RoleServiceAllRequest, RoleServiceAllResponse>;
    /**
     * @generated from protobuf rpc: ByID(auth.role.v1.RoleServiceByIDRequest) returns (auth.role.v1.RoleServiceByIDResponse);
     */
    byID(input: RoleServiceByIDRequest, options?: RpcOptions): UnaryCall<RoleServiceByIDRequest, RoleServiceByIDResponse>;
    /**
     * @generated from protobuf rpc: Create(auth.role.v1.RoleServiceCreateRequest) returns (auth.role.v1.RoleServiceCreateResponse);
     */
    create(input: RoleServiceCreateRequest, options?: RpcOptions): UnaryCall<RoleServiceCreateRequest, RoleServiceCreateResponse>;
    /**
     * @generated from protobuf rpc: Update(auth.role.v1.RoleServiceUpdateRequest) returns (auth.role.v1.RoleServiceUpdateResponse);
     */
    update(input: RoleServiceUpdateRequest, options?: RpcOptions): UnaryCall<RoleServiceUpdateRequest, RoleServiceUpdateResponse>;
}
/**
 * @generated from protobuf service auth.role.v1.RoleService
 */
export class RoleServiceClient implements IRoleServiceClient, ServiceInfo {
    typeName = RoleService.typeName;
    methods = RoleService.methods;
    options = RoleService.options;
    constructor(private readonly _transport: RpcTransport) {
    }
    /**
     * @generated from protobuf rpc: All(auth.role.v1.RoleServiceAllRequest) returns (auth.role.v1.RoleServiceAllResponse);
     */
    all(input: RoleServiceAllRequest, options?: RpcOptions): UnaryCall<RoleServiceAllRequest, RoleServiceAllResponse> {
        const method = this.methods[0], opt = this._transport.mergeOptions(options);
        return stackIntercept<RoleServiceAllRequest, RoleServiceAllResponse>("unary", this._transport, method, opt, input);
    }
    /**
     * @generated from protobuf rpc: ByID(auth.role.v1.RoleServiceByIDRequest) returns (auth.role.v1.RoleServiceByIDResponse);
     */
    byID(input: RoleServiceByIDRequest, options?: RpcOptions): UnaryCall<RoleServiceByIDRequest, RoleServiceByIDResponse> {
        const method = this.methods[1], opt = this._transport.mergeOptions(options);
        return stackIntercept<RoleServiceByIDRequest, RoleServiceByIDResponse>("unary", this._transport, method, opt, input);
    }
    /**
     * @generated from protobuf rpc: Create(auth.role.v1.RoleServiceCreateRequest) returns (auth.role.v1.RoleServiceCreateResponse);
     */
    create(input: RoleServiceCreateRequest, options?: RpcOptions): UnaryCall<RoleServiceCreateRequest, RoleServiceCreateResponse> {
        const method = this.methods[2], opt = this._transport.mergeOptions(options);
        return stackIntercept<RoleServiceCreateRequest, RoleServiceCreateResponse>("unary", this._transport, method, opt, input);
    }
    /**
     * @generated from protobuf rpc: Update(auth.role.v1.RoleServiceUpdateRequest) returns (auth.role.v1.RoleServiceUpdateResponse);
     */
    update(input: RoleServiceUpdateRequest, options?: RpcOptions): UnaryCall<RoleServiceUpdateRequest, RoleServiceUpdateResponse> {
        const method = this.methods[3], opt = this._transport.mergeOptions(options);
        return stackIntercept<RoleServiceUpdateRequest, RoleServiceUpdateResponse>("unary", this._transport, method, opt, input);
    }
}
