// @generated by protobuf-ts 2.9.0
// @generated from protobuf file "auth/role/v1/service.proto" (package "auth.role.v1", syntax proto3)
// tslint:disable
import { ServiceType } from "@protobuf-ts/runtime-rpc";
import { WireType } from "@protobuf-ts/runtime";
import type { BinaryWriteOptions } from "@protobuf-ts/runtime";
import type { IBinaryWriter } from "@protobuf-ts/runtime";
import { UnknownFieldHandler } from "@protobuf-ts/runtime";
import type { BinaryReadOptions } from "@protobuf-ts/runtime";
import type { IBinaryReader } from "@protobuf-ts/runtime";
import type { PartialMessage } from "@protobuf-ts/runtime";
import { reflectionMergePartial } from "@protobuf-ts/runtime";
import { MESSAGE_TYPE } from "@protobuf-ts/runtime";
import { MessageType } from "@protobuf-ts/runtime";
import { Role } from "./role";
/**
 * @generated from protobuf message auth.role.v1.RoleServiceAllRequest
 */
export interface RoleServiceAllRequest {
}
/**
 * @generated from protobuf message auth.role.v1.RoleServiceAllResponse
 */
export interface RoleServiceAllResponse {
    /**
     * @generated from protobuf field: repeated auth.role.v1.Role roles = 1;
     */
    roles: Role[];
}
/**
 * @generated from protobuf message auth.role.v1.RoleServiceByIDRequest
 */
export interface RoleServiceByIDRequest {
    /**
     * @generated from protobuf field: uint64 id = 1;
     */
    id: bigint;
}
/**
 * @generated from protobuf message auth.role.v1.RoleServiceByIDResponse
 */
export interface RoleServiceByIDResponse {
    /**
     * @generated from protobuf field: auth.role.v1.Role role = 1;
     */
    role?: Role;
}
/**
 * @generated from protobuf message auth.role.v1.RoleServiceCreateRequest
 */
export interface RoleServiceCreateRequest {
    /**
     * @generated from protobuf field: uint64 id = 1;
     */
    id: bigint;
    /**
     * @generated from protobuf field: string name = 2;
     */
    name: string;
}
/**
 * @generated from protobuf message auth.role.v1.RoleServiceCreateResponse
 */
export interface RoleServiceCreateResponse {
}
/**
 * @generated from protobuf message auth.role.v1.RoleServiceUpdateRequest
 */
export interface RoleServiceUpdateRequest {
    /**
     * @generated from protobuf field: uint64 id = 1;
     */
    id: bigint;
    /**
     * @generated from protobuf field: string name = 2;
     */
    name: string;
}
/**
 * @generated from protobuf message auth.role.v1.RoleServiceUpdateResponse
 */
export interface RoleServiceUpdateResponse {
}
// @generated message type with reflection information, may provide speed optimized methods
class RoleServiceAllRequest$Type extends MessageType<RoleServiceAllRequest> {
    constructor() {
        super("auth.role.v1.RoleServiceAllRequest", []);
    }
    create(value?: PartialMessage<RoleServiceAllRequest>): RoleServiceAllRequest {
        const message = {};
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<RoleServiceAllRequest>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: RoleServiceAllRequest): RoleServiceAllRequest {
        return target ?? this.create();
    }
    internalBinaryWrite(message: RoleServiceAllRequest, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message auth.role.v1.RoleServiceAllRequest
 */
export const RoleServiceAllRequest = new RoleServiceAllRequest$Type();
// @generated message type with reflection information, may provide speed optimized methods
class RoleServiceAllResponse$Type extends MessageType<RoleServiceAllResponse> {
    constructor() {
        super("auth.role.v1.RoleServiceAllResponse", [
            { no: 1, name: "roles", kind: "message", repeat: 1 /*RepeatType.PACKED*/, T: () => Role }
        ]);
    }
    create(value?: PartialMessage<RoleServiceAllResponse>): RoleServiceAllResponse {
        const message = { roles: [] };
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<RoleServiceAllResponse>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: RoleServiceAllResponse): RoleServiceAllResponse {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* repeated auth.role.v1.Role roles */ 1:
                    message.roles.push(Role.internalBinaryRead(reader, reader.uint32(), options));
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: RoleServiceAllResponse, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* repeated auth.role.v1.Role roles = 1; */
        for (let i = 0; i < message.roles.length; i++)
            Role.internalBinaryWrite(message.roles[i], writer.tag(1, WireType.LengthDelimited).fork(), options).join();
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message auth.role.v1.RoleServiceAllResponse
 */
export const RoleServiceAllResponse = new RoleServiceAllResponse$Type();
// @generated message type with reflection information, may provide speed optimized methods
class RoleServiceByIDRequest$Type extends MessageType<RoleServiceByIDRequest> {
    constructor() {
        super("auth.role.v1.RoleServiceByIDRequest", [
            { no: 1, name: "id", kind: "scalar", T: 4 /*ScalarType.UINT64*/, L: 0 /*LongType.BIGINT*/ }
        ]);
    }
    create(value?: PartialMessage<RoleServiceByIDRequest>): RoleServiceByIDRequest {
        const message = { id: 0n };
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<RoleServiceByIDRequest>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: RoleServiceByIDRequest): RoleServiceByIDRequest {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* uint64 id */ 1:
                    message.id = reader.uint64().toBigInt();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: RoleServiceByIDRequest, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* uint64 id = 1; */
        if (message.id !== 0n)
            writer.tag(1, WireType.Varint).uint64(message.id);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message auth.role.v1.RoleServiceByIDRequest
 */
export const RoleServiceByIDRequest = new RoleServiceByIDRequest$Type();
// @generated message type with reflection information, may provide speed optimized methods
class RoleServiceByIDResponse$Type extends MessageType<RoleServiceByIDResponse> {
    constructor() {
        super("auth.role.v1.RoleServiceByIDResponse", [
            { no: 1, name: "role", kind: "message", T: () => Role }
        ]);
    }
    create(value?: PartialMessage<RoleServiceByIDResponse>): RoleServiceByIDResponse {
        const message = {};
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<RoleServiceByIDResponse>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: RoleServiceByIDResponse): RoleServiceByIDResponse {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* auth.role.v1.Role role */ 1:
                    message.role = Role.internalBinaryRead(reader, reader.uint32(), options, message.role);
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: RoleServiceByIDResponse, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* auth.role.v1.Role role = 1; */
        if (message.role)
            Role.internalBinaryWrite(message.role, writer.tag(1, WireType.LengthDelimited).fork(), options).join();
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message auth.role.v1.RoleServiceByIDResponse
 */
export const RoleServiceByIDResponse = new RoleServiceByIDResponse$Type();
// @generated message type with reflection information, may provide speed optimized methods
class RoleServiceCreateRequest$Type extends MessageType<RoleServiceCreateRequest> {
    constructor() {
        super("auth.role.v1.RoleServiceCreateRequest", [
            { no: 1, name: "id", kind: "scalar", T: 4 /*ScalarType.UINT64*/, L: 0 /*LongType.BIGINT*/ },
            { no: 2, name: "name", kind: "scalar", T: 9 /*ScalarType.STRING*/ }
        ]);
    }
    create(value?: PartialMessage<RoleServiceCreateRequest>): RoleServiceCreateRequest {
        const message = { id: 0n, name: "" };
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<RoleServiceCreateRequest>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: RoleServiceCreateRequest): RoleServiceCreateRequest {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* uint64 id */ 1:
                    message.id = reader.uint64().toBigInt();
                    break;
                case /* string name */ 2:
                    message.name = reader.string();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: RoleServiceCreateRequest, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* uint64 id = 1; */
        if (message.id !== 0n)
            writer.tag(1, WireType.Varint).uint64(message.id);
        /* string name = 2; */
        if (message.name !== "")
            writer.tag(2, WireType.LengthDelimited).string(message.name);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message auth.role.v1.RoleServiceCreateRequest
 */
export const RoleServiceCreateRequest = new RoleServiceCreateRequest$Type();
// @generated message type with reflection information, may provide speed optimized methods
class RoleServiceCreateResponse$Type extends MessageType<RoleServiceCreateResponse> {
    constructor() {
        super("auth.role.v1.RoleServiceCreateResponse", []);
    }
    create(value?: PartialMessage<RoleServiceCreateResponse>): RoleServiceCreateResponse {
        const message = {};
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<RoleServiceCreateResponse>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: RoleServiceCreateResponse): RoleServiceCreateResponse {
        return target ?? this.create();
    }
    internalBinaryWrite(message: RoleServiceCreateResponse, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message auth.role.v1.RoleServiceCreateResponse
 */
export const RoleServiceCreateResponse = new RoleServiceCreateResponse$Type();
// @generated message type with reflection information, may provide speed optimized methods
class RoleServiceUpdateRequest$Type extends MessageType<RoleServiceUpdateRequest> {
    constructor() {
        super("auth.role.v1.RoleServiceUpdateRequest", [
            { no: 1, name: "id", kind: "scalar", T: 4 /*ScalarType.UINT64*/, L: 0 /*LongType.BIGINT*/ },
            { no: 2, name: "name", kind: "scalar", T: 9 /*ScalarType.STRING*/ }
        ]);
    }
    create(value?: PartialMessage<RoleServiceUpdateRequest>): RoleServiceUpdateRequest {
        const message = { id: 0n, name: "" };
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<RoleServiceUpdateRequest>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: RoleServiceUpdateRequest): RoleServiceUpdateRequest {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* uint64 id */ 1:
                    message.id = reader.uint64().toBigInt();
                    break;
                case /* string name */ 2:
                    message.name = reader.string();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: RoleServiceUpdateRequest, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* uint64 id = 1; */
        if (message.id !== 0n)
            writer.tag(1, WireType.Varint).uint64(message.id);
        /* string name = 2; */
        if (message.name !== "")
            writer.tag(2, WireType.LengthDelimited).string(message.name);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message auth.role.v1.RoleServiceUpdateRequest
 */
export const RoleServiceUpdateRequest = new RoleServiceUpdateRequest$Type();
// @generated message type with reflection information, may provide speed optimized methods
class RoleServiceUpdateResponse$Type extends MessageType<RoleServiceUpdateResponse> {
    constructor() {
        super("auth.role.v1.RoleServiceUpdateResponse", []);
    }
    create(value?: PartialMessage<RoleServiceUpdateResponse>): RoleServiceUpdateResponse {
        const message = {};
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<RoleServiceUpdateResponse>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: RoleServiceUpdateResponse): RoleServiceUpdateResponse {
        return target ?? this.create();
    }
    internalBinaryWrite(message: RoleServiceUpdateResponse, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message auth.role.v1.RoleServiceUpdateResponse
 */
export const RoleServiceUpdateResponse = new RoleServiceUpdateResponse$Type();
/**
 * @generated ServiceType for protobuf service auth.role.v1.RoleService
 */
export const RoleService = new ServiceType("auth.role.v1.RoleService", [
    { name: "All", options: {}, I: RoleServiceAllRequest, O: RoleServiceAllResponse },
    { name: "ByID", options: {}, I: RoleServiceByIDRequest, O: RoleServiceByIDResponse },
    { name: "Create", options: {}, I: RoleServiceCreateRequest, O: RoleServiceCreateResponse },
    { name: "Update", options: {}, I: RoleServiceUpdateRequest, O: RoleServiceUpdateResponse }
]);
