// @generated by protobuf-ts 2.9.0
// @generated from protobuf file "auth/user/v1/service.proto" (package "auth.user.v1", syntax proto3)
// tslint:disable
import type { RpcTransport } from "@protobuf-ts/runtime-rpc";
import type { ServiceInfo } from "@protobuf-ts/runtime-rpc";
import { UserService } from "./service";
import type { UserServiceUpdateResponse } from "./service";
import type { UserServiceUpdateRequest } from "./service";
import type { UserServiceCreateResponse } from "./service";
import type { UserServiceCreateRequest } from "./service";
import type { UserServiceByIDResponse } from "./service";
import type { UserServiceByIDRequest } from "./service";
import { stackIntercept } from "@protobuf-ts/runtime-rpc";
import type { UserServiceAllResponse } from "./service";
import type { UserServiceAllRequest } from "./service";
import type { UnaryCall } from "@protobuf-ts/runtime-rpc";
import type { RpcOptions } from "@protobuf-ts/runtime-rpc";
/**
 * @generated from protobuf service auth.user.v1.UserService
 */
export interface IUserServiceClient {
    /**
     * @generated from protobuf rpc: All(auth.user.v1.UserServiceAllRequest) returns (auth.user.v1.UserServiceAllResponse);
     */
    all(input: UserServiceAllRequest, options?: RpcOptions): UnaryCall<UserServiceAllRequest, UserServiceAllResponse>;
    /**
     * @generated from protobuf rpc: ByID(auth.user.v1.UserServiceByIDRequest) returns (auth.user.v1.UserServiceByIDResponse);
     */
    byID(input: UserServiceByIDRequest, options?: RpcOptions): UnaryCall<UserServiceByIDRequest, UserServiceByIDResponse>;
    /**
     * @generated from protobuf rpc: Create(auth.user.v1.UserServiceCreateRequest) returns (auth.user.v1.UserServiceCreateResponse);
     */
    create(input: UserServiceCreateRequest, options?: RpcOptions): UnaryCall<UserServiceCreateRequest, UserServiceCreateResponse>;
    /**
     * @generated from protobuf rpc: Update(auth.user.v1.UserServiceUpdateRequest) returns (auth.user.v1.UserServiceUpdateResponse);
     */
    update(input: UserServiceUpdateRequest, options?: RpcOptions): UnaryCall<UserServiceUpdateRequest, UserServiceUpdateResponse>;
}
/**
 * @generated from protobuf service auth.user.v1.UserService
 */
export class UserServiceClient implements IUserServiceClient, ServiceInfo {
    typeName = UserService.typeName;
    methods = UserService.methods;
    options = UserService.options;
    constructor(private readonly _transport: RpcTransport) {
    }
    /**
     * @generated from protobuf rpc: All(auth.user.v1.UserServiceAllRequest) returns (auth.user.v1.UserServiceAllResponse);
     */
    all(input: UserServiceAllRequest, options?: RpcOptions): UnaryCall<UserServiceAllRequest, UserServiceAllResponse> {
        const method = this.methods[0], opt = this._transport.mergeOptions(options);
        return stackIntercept<UserServiceAllRequest, UserServiceAllResponse>("unary", this._transport, method, opt, input);
    }
    /**
     * @generated from protobuf rpc: ByID(auth.user.v1.UserServiceByIDRequest) returns (auth.user.v1.UserServiceByIDResponse);
     */
    byID(input: UserServiceByIDRequest, options?: RpcOptions): UnaryCall<UserServiceByIDRequest, UserServiceByIDResponse> {
        const method = this.methods[1], opt = this._transport.mergeOptions(options);
        return stackIntercept<UserServiceByIDRequest, UserServiceByIDResponse>("unary", this._transport, method, opt, input);
    }
    /**
     * @generated from protobuf rpc: Create(auth.user.v1.UserServiceCreateRequest) returns (auth.user.v1.UserServiceCreateResponse);
     */
    create(input: UserServiceCreateRequest, options?: RpcOptions): UnaryCall<UserServiceCreateRequest, UserServiceCreateResponse> {
        const method = this.methods[2], opt = this._transport.mergeOptions(options);
        return stackIntercept<UserServiceCreateRequest, UserServiceCreateResponse>("unary", this._transport, method, opt, input);
    }
    /**
     * @generated from protobuf rpc: Update(auth.user.v1.UserServiceUpdateRequest) returns (auth.user.v1.UserServiceUpdateResponse);
     */
    update(input: UserServiceUpdateRequest, options?: RpcOptions): UnaryCall<UserServiceUpdateRequest, UserServiceUpdateResponse> {
        const method = this.methods[3], opt = this._transport.mergeOptions(options);
        return stackIntercept<UserServiceUpdateRequest, UserServiceUpdateResponse>("unary", this._transport, method, opt, input);
    }
}
