// @generated by protobuf-ts 2.9.0
// @generated from protobuf file "common/events/v1/service.proto" (package "common.events.v1", syntax proto3)
// tslint:disable
import type { RpcTransport } from "@protobuf-ts/runtime-rpc";
import type { ServiceInfo } from "@protobuf-ts/runtime-rpc";
import { EventService } from "./service";
import type { EventsResponse } from "./service";
import type { EventsRequest } from "./service";
import type { DuplexStreamingCall } from "@protobuf-ts/runtime-rpc";
import type { RecordUserEventsResponse } from "./service";
import type { RecordUserEventsRequest } from "./service";
import type { ClientStreamingCall } from "@protobuf-ts/runtime-rpc";
import type { NewEventsResponse } from "./service";
import type { NewEventsRequest } from "./service";
import type { ServerStreamingCall } from "@protobuf-ts/runtime-rpc";
import { stackIntercept } from "@protobuf-ts/runtime-rpc";
import type { EventResponse } from "./service";
import type { EventRequest } from "./service";
import type { UnaryCall } from "@protobuf-ts/runtime-rpc";
import type { RpcOptions } from "@protobuf-ts/runtime-rpc";
/**
 * @generated from protobuf service common.events.v1.EventService
 */
export interface IEventServiceClient {
    /**
     * simple RPC.
     *
     * @generated from protobuf rpc: Event(common.events.v1.EventRequest) returns (common.events.v1.EventResponse);
     */
    event(input: EventRequest, options?: RpcOptions): UnaryCall<EventRequest, EventResponse>;
    /**
     * server-side stream - client send request and server start sends stream of events.
     *
     * @generated from protobuf rpc: NewEvents(common.events.v1.NewEventsRequest) returns (stream common.events.v1.NewEventsResponse);
     */
    newEvents(input: NewEventsRequest, options?: RpcOptions): ServerStreamingCall<NewEventsRequest, NewEventsResponse>;
    /**
     * client side stream - client opens stream, send messages, than waits until server read them all and send response.
     *
     * @generated from protobuf rpc: RecordUserEvents(stream common.events.v1.RecordUserEventsRequest) returns (common.events.v1.RecordUserEventsResponse);
     */
    recordUserEvents(options?: RpcOptions): ClientStreamingCall<RecordUserEventsRequest, RecordUserEventsResponse>;
    /**
     * both sides stream - both sides send messages in any order.
     *
     * @generated from protobuf rpc: Events(stream common.events.v1.EventsRequest) returns (stream common.events.v1.EventsResponse);
     */
    events(options?: RpcOptions): DuplexStreamingCall<EventsRequest, EventsResponse>;
}
/**
 * @generated from protobuf service common.events.v1.EventService
 */
export class EventServiceClient implements IEventServiceClient, ServiceInfo {
    typeName = EventService.typeName;
    methods = EventService.methods;
    options = EventService.options;
    constructor(private readonly _transport: RpcTransport) {
    }
    /**
     * simple RPC.
     *
     * @generated from protobuf rpc: Event(common.events.v1.EventRequest) returns (common.events.v1.EventResponse);
     */
    event(input: EventRequest, options?: RpcOptions): UnaryCall<EventRequest, EventResponse> {
        const method = this.methods[0], opt = this._transport.mergeOptions(options);
        return stackIntercept<EventRequest, EventResponse>("unary", this._transport, method, opt, input);
    }
    /**
     * server-side stream - client send request and server start sends stream of events.
     *
     * @generated from protobuf rpc: NewEvents(common.events.v1.NewEventsRequest) returns (stream common.events.v1.NewEventsResponse);
     */
    newEvents(input: NewEventsRequest, options?: RpcOptions): ServerStreamingCall<NewEventsRequest, NewEventsResponse> {
        const method = this.methods[1], opt = this._transport.mergeOptions(options);
        return stackIntercept<NewEventsRequest, NewEventsResponse>("serverStreaming", this._transport, method, opt, input);
    }
    /**
     * client side stream - client opens stream, send messages, than waits until server read them all and send response.
     *
     * @generated from protobuf rpc: RecordUserEvents(stream common.events.v1.RecordUserEventsRequest) returns (common.events.v1.RecordUserEventsResponse);
     */
    recordUserEvents(options?: RpcOptions): ClientStreamingCall<RecordUserEventsRequest, RecordUserEventsResponse> {
        const method = this.methods[2], opt = this._transport.mergeOptions(options);
        return stackIntercept<RecordUserEventsRequest, RecordUserEventsResponse>("clientStreaming", this._transport, method, opt);
    }
    /**
     * both sides stream - both sides send messages in any order.
     *
     * @generated from protobuf rpc: Events(stream common.events.v1.EventsRequest) returns (stream common.events.v1.EventsResponse);
     */
    events(options?: RpcOptions): DuplexStreamingCall<EventsRequest, EventsResponse> {
        const method = this.methods[3], opt = this._transport.mergeOptions(options);
        return stackIntercept<EventsRequest, EventsResponse>("duplex", this._transport, method, opt);
    }
}
