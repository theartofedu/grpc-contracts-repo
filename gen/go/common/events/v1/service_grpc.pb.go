// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.3.0
// - protoc             (unknown)
// source: common/events/v1/service.proto

package pb_common_events

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

const (
	EventService_Event_FullMethodName            = "/common.events.v1.EventService/Event"
	EventService_NewEvents_FullMethodName        = "/common.events.v1.EventService/NewEvents"
	EventService_RecordUserEvents_FullMethodName = "/common.events.v1.EventService/RecordUserEvents"
	EventService_Events_FullMethodName           = "/common.events.v1.EventService/Events"
)

// EventServiceClient is the client API for EventService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type EventServiceClient interface {
	// simple RPC.
	Event(ctx context.Context, in *EventRequest, opts ...grpc.CallOption) (*EventResponse, error)
	// server-side stream - client send request and server start sends stream of events.
	NewEvents(ctx context.Context, in *NewEventsRequest, opts ...grpc.CallOption) (EventService_NewEventsClient, error)
	// client side stream - client opens stream, send messages, than waits until server read them all and send response.
	RecordUserEvents(ctx context.Context, opts ...grpc.CallOption) (EventService_RecordUserEventsClient, error)
	// both sides stream - both sides send messages in any order.
	Events(ctx context.Context, opts ...grpc.CallOption) (EventService_EventsClient, error)
}

type eventServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewEventServiceClient(cc grpc.ClientConnInterface) EventServiceClient {
	return &eventServiceClient{cc}
}

func (c *eventServiceClient) Event(ctx context.Context, in *EventRequest, opts ...grpc.CallOption) (*EventResponse, error) {
	out := new(EventResponse)
	err := c.cc.Invoke(ctx, EventService_Event_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *eventServiceClient) NewEvents(ctx context.Context, in *NewEventsRequest, opts ...grpc.CallOption) (EventService_NewEventsClient, error) {
	stream, err := c.cc.NewStream(ctx, &EventService_ServiceDesc.Streams[0], EventService_NewEvents_FullMethodName, opts...)
	if err != nil {
		return nil, err
	}
	x := &eventServiceNewEventsClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type EventService_NewEventsClient interface {
	Recv() (*NewEventsResponse, error)
	grpc.ClientStream
}

type eventServiceNewEventsClient struct {
	grpc.ClientStream
}

func (x *eventServiceNewEventsClient) Recv() (*NewEventsResponse, error) {
	m := new(NewEventsResponse)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *eventServiceClient) RecordUserEvents(ctx context.Context, opts ...grpc.CallOption) (EventService_RecordUserEventsClient, error) {
	stream, err := c.cc.NewStream(ctx, &EventService_ServiceDesc.Streams[1], EventService_RecordUserEvents_FullMethodName, opts...)
	if err != nil {
		return nil, err
	}
	x := &eventServiceRecordUserEventsClient{stream}
	return x, nil
}

type EventService_RecordUserEventsClient interface {
	Send(*RecordUserEventsRequest) error
	CloseAndRecv() (*RecordUserEventsResponse, error)
	grpc.ClientStream
}

type eventServiceRecordUserEventsClient struct {
	grpc.ClientStream
}

func (x *eventServiceRecordUserEventsClient) Send(m *RecordUserEventsRequest) error {
	return x.ClientStream.SendMsg(m)
}

func (x *eventServiceRecordUserEventsClient) CloseAndRecv() (*RecordUserEventsResponse, error) {
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	m := new(RecordUserEventsResponse)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *eventServiceClient) Events(ctx context.Context, opts ...grpc.CallOption) (EventService_EventsClient, error) {
	stream, err := c.cc.NewStream(ctx, &EventService_ServiceDesc.Streams[2], EventService_Events_FullMethodName, opts...)
	if err != nil {
		return nil, err
	}
	x := &eventServiceEventsClient{stream}
	return x, nil
}

type EventService_EventsClient interface {
	Send(*EventsRequest) error
	Recv() (*EventsResponse, error)
	grpc.ClientStream
}

type eventServiceEventsClient struct {
	grpc.ClientStream
}

func (x *eventServiceEventsClient) Send(m *EventsRequest) error {
	return x.ClientStream.SendMsg(m)
}

func (x *eventServiceEventsClient) Recv() (*EventsResponse, error) {
	m := new(EventsResponse)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// EventServiceServer is the server API for EventService service.
// All implementations must embed UnimplementedEventServiceServer
// for forward compatibility
type EventServiceServer interface {
	// simple RPC.
	Event(context.Context, *EventRequest) (*EventResponse, error)
	// server-side stream - client send request and server start sends stream of events.
	NewEvents(*NewEventsRequest, EventService_NewEventsServer) error
	// client side stream - client opens stream, send messages, than waits until server read them all and send response.
	RecordUserEvents(EventService_RecordUserEventsServer) error
	// both sides stream - both sides send messages in any order.
	Events(EventService_EventsServer) error
	mustEmbedUnimplementedEventServiceServer()
}

// UnimplementedEventServiceServer must be embedded to have forward compatible implementations.
type UnimplementedEventServiceServer struct {
}

func (UnimplementedEventServiceServer) Event(context.Context, *EventRequest) (*EventResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Event not implemented")
}
func (UnimplementedEventServiceServer) NewEvents(*NewEventsRequest, EventService_NewEventsServer) error {
	return status.Errorf(codes.Unimplemented, "method NewEvents not implemented")
}
func (UnimplementedEventServiceServer) RecordUserEvents(EventService_RecordUserEventsServer) error {
	return status.Errorf(codes.Unimplemented, "method RecordUserEvents not implemented")
}
func (UnimplementedEventServiceServer) Events(EventService_EventsServer) error {
	return status.Errorf(codes.Unimplemented, "method Events not implemented")
}
func (UnimplementedEventServiceServer) mustEmbedUnimplementedEventServiceServer() {}

// UnsafeEventServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to EventServiceServer will
// result in compilation errors.
type UnsafeEventServiceServer interface {
	mustEmbedUnimplementedEventServiceServer()
}

func RegisterEventServiceServer(s grpc.ServiceRegistrar, srv EventServiceServer) {
	s.RegisterService(&EventService_ServiceDesc, srv)
}

func _EventService_Event_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(EventRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(EventServiceServer).Event(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: EventService_Event_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(EventServiceServer).Event(ctx, req.(*EventRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _EventService_NewEvents_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(NewEventsRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(EventServiceServer).NewEvents(m, &eventServiceNewEventsServer{stream})
}

type EventService_NewEventsServer interface {
	Send(*NewEventsResponse) error
	grpc.ServerStream
}

type eventServiceNewEventsServer struct {
	grpc.ServerStream
}

func (x *eventServiceNewEventsServer) Send(m *NewEventsResponse) error {
	return x.ServerStream.SendMsg(m)
}

func _EventService_RecordUserEvents_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(EventServiceServer).RecordUserEvents(&eventServiceRecordUserEventsServer{stream})
}

type EventService_RecordUserEventsServer interface {
	SendAndClose(*RecordUserEventsResponse) error
	Recv() (*RecordUserEventsRequest, error)
	grpc.ServerStream
}

type eventServiceRecordUserEventsServer struct {
	grpc.ServerStream
}

func (x *eventServiceRecordUserEventsServer) SendAndClose(m *RecordUserEventsResponse) error {
	return x.ServerStream.SendMsg(m)
}

func (x *eventServiceRecordUserEventsServer) Recv() (*RecordUserEventsRequest, error) {
	m := new(RecordUserEventsRequest)
	if err := x.ServerStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func _EventService_Events_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(EventServiceServer).Events(&eventServiceEventsServer{stream})
}

type EventService_EventsServer interface {
	Send(*EventsResponse) error
	Recv() (*EventsRequest, error)
	grpc.ServerStream
}

type eventServiceEventsServer struct {
	grpc.ServerStream
}

func (x *eventServiceEventsServer) Send(m *EventsResponse) error {
	return x.ServerStream.SendMsg(m)
}

func (x *eventServiceEventsServer) Recv() (*EventsRequest, error) {
	m := new(EventsRequest)
	if err := x.ServerStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// EventService_ServiceDesc is the grpc.ServiceDesc for EventService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var EventService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "common.events.v1.EventService",
	HandlerType: (*EventServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Event",
			Handler:    _EventService_Event_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "NewEvents",
			Handler:       _EventService_NewEvents_Handler,
			ServerStreams: true,
		},
		{
			StreamName:    "RecordUserEvents",
			Handler:       _EventService_RecordUserEvents_Handler,
			ClientStreams: true,
		},
		{
			StreamName:    "Events",
			Handler:       _EventService_Events_Handler,
			ServerStreams: true,
			ClientStreams: true,
		},
	},
	Metadata: "common/events/v1/service.proto",
}
